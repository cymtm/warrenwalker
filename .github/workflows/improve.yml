name: Codebase Improvement & Lockfile Maintenance

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # Every hour
  push:
    branches: [main]
    paths: ['package.json']  # Trigger on dependency changes

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  generate-lockfile:
    runs-on: ubuntu-latest
    outputs:
      lockfile-changed: ${{ steps.lockfile-check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Generate package-lock.json
        run: |
          # Clean install to ensure lockfile is properly generated
          rm -f package-lock.json
          npm install --package-lock-only --no-audit --no-fund
      
      - name: Check lockfile changes
        id: lockfile-check
        run: |
          if ! git diff --quiet package-lock.json 2>/dev/null || [ ! -f package-lock.json ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Lockfile changed or missing"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Lockfile unchanged"
          fi
      
      - name: Commit lockfile if changed
        if: steps.lockfile-check.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package-lock.json
          git commit -m "chore: update package-lock.json [skip ci]"
          git push

  improvement-autofix:
    needs: generate-lockfile
    runs-on: ubuntu-latest
    if: always()  # Run even if lockfile job fails
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref || github.ref }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          # Use npm ci if lockfile exists, otherwise npm install
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
      
      - name: Create .eslintrc.js if missing
        run: |
          if [ ! -f .eslintrc.js ] && [ ! -f .eslintrc.json ] && [ ! -f eslint.config.js ]; then
            cat > .eslintrc.js << 'EOF'
          module.exports = {
            env: { node: true, es2022: true },
            extends: ['eslint:recommended'],
            parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
            rules: {
              'no-unused-vars': 'warn',
              'no-console': 'off'
            }
          };
          EOF
          fi
      
      - name: Generate massive code changes for testing
        run: |
          # Create a large test file to simulate big changes
          mkdir -p test-files
          for i in {1..100}; do
            cat > "test-files/generated-$i.js" << EOF
          // Generated file $i for testing large diffs
          const data$i = {
            id: $i,
            name: "Test File $i",
            description: "This is a generated file for testing purposes",
            timestamp: new Date().toISOString(),
            content: [
              "Line 1 of content for file $i",
              "Line 2 of content for file $i", 
              "Line 3 of content for file $i",
              "Line 4 of content for file $i",
              "Line 5 of content for file $i"
            ],
            metadata: {
              version: "1.0.0",
              author: "GitHub Actions Bot",
              generated: true,
              fileNumber: $i
            }
          };

          function processData$i() {
            console.log("Processing data for file $i");
            return data$i.content.map((line, index) => {
              return \`\${index + 1}: \${line}\`;
            });
          }

          function validateData$i() {
            if (!data$i.id || !data$i.name) {
              throw new Error("Invalid data structure in file $i");
            }
            return true;
          }

          module.exports = {
            data: data$i,
            process: processData$i,
            validate: validateData$i
          };
          EOF
          done
          
          # Create additional large files
          for i in {1..50}; do
            cat > "test-files/large-data-$i.json" << EOF
          {
            "fileId": $i,
            "generatedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "largeArray": [
          $(for j in {1..100}; do echo "      {\"id\": $j, \"value\": \"Item $j in file $i\", \"processed\": false},"; done | sed '$s/,$//')
            ],
            "metadata": {
              "totalItems": 100,
              "fileSize": "large",
              "purpose": "Testing large diff generation"
            }
          }
          EOF
          done
      
      - name: Lint and autofix
        run: |
          # Install ESLint if not present
          if ! npm list eslint --depth=0 &>/dev/null; then
            npm install --no-save eslint
          fi
          
          # Run with proper error handling
          npx eslint . --fix --ext .js,.ts,.jsx,.tsx --ignore-path .gitignore 2>/dev/null || {
            echo "ESLint failed or not configured, skipping..."
          }
      
      - name: Format with Prettier
        run: |
          # Install Prettier if not present
          if ! npm list prettier --depth=0 &>/dev/null; then
            npm install --no-save prettier
          fi
          
          # Check if prettier config exists or create basic one
          if [ ! -f .prettierrc ] && [ ! -f .prettierrc.json ] && [ ! -f prettier.config.js ]; then
            echo '{"semi": true, "singleQuote": true, "tabWidth": 2}' > .prettierrc.json
          fi
          npx prettier --write . --ignore-path .gitignore 2>/dev/null || {
            echo "Prettier failed or not available, skipping..."
          }
      
      - name: Check for code changes and diff size
        id: git-check
        run: |
          git add -A
          if ! git diff --cached --quiet; then
            echo "changed=true" >> $GITHUB_OUTPUT
            
            # Count lines in diff
            DIFF_LINES=$(git diff --cached --numstat | awk '{added += $1; deleted += $2} END {print added + deleted}')
            echo "diff-lines=$DIFF_LINES" >> $GITHUB_OUTPUT
            
            echo "Files changed:"
            git diff --cached --name-only
            echo "Total diff lines: $DIFF_LINES"
            
            # Check if diff is too large for direct commit
            if [ "$DIFF_LINES" -gt 1000 ]; then
              echo "large-diff=true" >> $GITHUB_OUTPUT
              echo "Large diff detected ($DIFF_LINES lines) - will create pull request"
            else
              echo "large-diff=false" >> $GITHUB_OUTPUT
              echo "Small diff detected ($DIFF_LINES lines) - will commit directly"
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "large-diff=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi
      
      - name: Run tests before commit
        if: steps.git-check.outputs.changed == 'true'
        run: |
          # Only run tests if they exist and changes were made
          if [ -f package.json ] && npm run test --if-present; then
            echo "Tests passed"
          else
            echo "No tests found or tests failed - proceeding anyway"
          fi
        continue-on-error: true
      
      - name: Create Pull Request for large changes
        if: steps.git-check.outputs.changed == 'true' && steps.git-check.outputs.large-diff == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: auto-applied lint and format fixes (large diff: ${{ steps.git-check.outputs.diff-lines }} lines)"
          title: "🤖 Automated Code Maintenance (Large Changes)"
          body: |
            ## Automated Code Maintenance
            
            This pull request contains automated fixes and improvements to the codebase.
            
            **Changes Summary:**
            - Total diff lines: ${{ steps.git-check.outputs.diff-lines }}
            - ESLint auto-fixes applied
            - Prettier formatting applied
            - Generated test files for large diff testing
            
            **Files Modified:**
            ```
            $(git diff --cached --name-only | head -20)
            ```
            
            This PR was created because the diff size (${{ steps.git-check.outputs.diff-lines }} lines) exceeds the threshold for direct commits.
            
            Please review the changes before merging.
          branch: automated-maintenance-$(date +%Y%m%d-%H%M%S)
          delete-branch: true
          labels: |
            automation
            maintenance
            large-diff
      
      - name: Commit small changes directly
        if: steps.git-check.outputs.changed == 'true' && steps.git-check.outputs.large-diff == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "chore: auto-applied lint and format fixes (${{ steps.git-check.outputs.diff-lines }} lines) [skip ci]"
          git push
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Automated codebase maintenance failed',
              body: `The automated codebase maintenance workflow failed. Please check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
              
              **Failure Details:**
              - Workflow: ${context.workflow}
              - Run ID: ${context.runId}
              - Commit: ${context.sha}
              
              Please investigate and fix any issues.`,
              labels: ['bug', 'automation', 'workflow-failure']
            })

  security-audit:
    needs: [generate-lockfile, improvement-autofix]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
      
      - name: Run security audit
        run: |
          npm audit --audit-level=high || {
            echo "Security vulnerabilities found!"
            npm audit fix --force || echo "Auto-fix failed"
          }
      
      - name: Check for security fix changes
        id: security-check
        run: |
          if ! git diff --quiet package-lock.json 2>/dev/null; then
            echo "security-fixes=true" >> $GITHUB_OUTPUT
            SECURITY_DIFF_LINES=$(git diff --numstat package-lock.json | awk '{print $1 + $2}')
            echo "security-diff-lines=$SECURITY_DIFF_LINES" >> $GITHUB_OUTPUT
            echo "Security fixes found: $SECURITY_DIFF_LINES lines changed"
          else
            echo "security-fixes=false" >> $GITHUB_OUTPUT
            echo "No security fixes needed"
          fi
      
      - name: Create PR for large security fixes
        if: steps.security-check.outputs.security-fixes == 'true' && steps.security-check.outputs.security-diff-lines > 500
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: security audit fixes (${{ steps.security-check.outputs.security-diff-lines }} lines)"
          title: "🔒 Security Audit Fixes (Large Changes)"
          body: |
            ## Security Audit Fixes
            
            This pull request contains automated security fixes from `npm audit fix`.
            
            **Changes Summary:**
            - Security diff lines: ${{ steps.security-check.outputs.security-diff-lines }}
            - Applied via: `npm audit fix --force`
            - File modified: package-lock.json
            
            **⚠️ Important Notes:**
            - This is a large security update that may include breaking changes
            - Please review dependencies carefully before merging
            - Test thoroughly in a staging environment
            
            Generated by automated security audit workflow.
          branch: security-fixes-$(date +%Y%m%d-%H%M%S)
          delete-branch: true
          labels: |
            security
            automation
            dependencies
            large-diff
      
      - name: Commit small security fixes directly
        if: steps.security-check.outputs.security-fixes == 'true' && steps.security-check.outputs.security-diff-lines <= 500
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package-lock.json
          git commit -m "chore: security audit fixes (${{ steps.security-check.outputs.security-diff-lines }} lines) [skip ci]"
          git push
      
      - name: Create security issue on audit failures
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔒 Security audit failed - manual intervention required',
              body: `The automated security audit workflow failed and requires manual attention.
              
              **Failure Details:**
              - Workflow: Security Audit
              - Run ID: ${context.runId}
              - Commit: ${context.sha}
              - Time: ${new Date().toISOString()}
              
              **Possible Issues:**
              - High-severity vulnerabilities that couldn't be auto-fixed
              - Package conflicts during audit fix
              - Network issues during dependency resolution
              
              **Recommended Actions:**
              1. Run \`npm audit\` locally to see specific vulnerabilities
              2. Run \`npm audit fix\` to attempt automatic fixes
              3. For unfixable issues, consider \`npm audit fix --force\` (review changes carefully)
              4. Update dependencies manually if needed
              
              Please address these security concerns promptly.`,
              labels: ['security', 'urgent', 'automation', 'manual-review-required']
            })

  summary-report:
    needs: [generate-lockfile, improvement-autofix, security-audit]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate workflow summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'Lockfile Generation', result: '${{ needs.generate-lockfile.result }}' },
              { name: 'Code Improvement', result: '${{ needs.improvement-autofix.result }}' },
              { name: 'Security Audit', result: '${{ needs.security-audit.result }}' }
            ];
            
            let summary = '# 🤖 Automated Maintenance Summary\n\n';
            summary += `**Workflow Run:** ${context.runId}\n`;
            summary += `**Triggered by:** ${context.eventName}\n`;
            summary += `**Commit:** ${context.sha.substring(0, 7)}\n`;
            summary += `**Time:** ${new Date().toISOString()}\n\n`;
            
            summary += '## Job Results\n\n';
            jobs.forEach(job => {
              const emoji = job.result === 'success' ? '✅' : 
                           job.result === 'failure' ? '❌' : 
                           job.result === 'cancelled' ? '⏹️' : '⚠️';
              summary += `${emoji} **${job.name}:** ${job.result}\n`;
            });
            
            summary += '\n## Actions Taken\n\n';
            
            if ('${{ needs.generate-lockfile.outputs.lockfile-changed }}' === 'true') {
              summary += '- 📦 Updated package-lock.json\n';
            }
            
            if ('${{ needs.improvement-autofix.result }}' === 'success') {
              summary += '- 🎨 Applied code formatting and linting\n';
              summary += '- 📁 Generated test files for large diff testing\n';
            }
            
            if ('${{ needs.security-audit.result }}' === 'success') {
              summary += '- 🔒 Completed security audit\n';
            }
            
            summary += '\n---\n*This summary was generated automatically by GitHub Actions*';
            
            core.summary.addRaw(summary);
            await core.summary.write();
